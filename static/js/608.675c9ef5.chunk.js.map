{"version":3,"file":"static/js/608.675c9ef5.chunk.js","mappings":"gRA2BA,EA3BkB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MAIJC,EAKXD,EALFE,YACAC,EAIEH,EAJFG,MACcC,EAGZJ,EAHFK,aACAC,EAEEN,EAFFM,SACcC,EACZP,EADFQ,aAGIC,EAAUC,KAAKC,MAAOJ,EAAc,GAAM,KAAKK,WAAa,IAElE,OACE,4BACE,yBACGZ,GAASC,IACR,gBAAKY,IAAG,UAhBK,kCAgBL,YAAqBZ,GAAca,IAAKd,EAAMG,WAG1D,kCAAQA,EAAR,aAAkBC,GAAeA,EAAYW,MAAM,EAAG,GAAtD,QACA,yBAAG,cAAYN,MACf,uBAAIH,MAGT,ECiCD,EApDqB,WACnB,OAA0BU,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOhB,EAAP,KAAciB,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAEMC,GAAUC,EAAAA,EAAAA,MAoBhB,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBJ,GAAa,GADG,mBAIMK,EAAAA,EAAAA,IAAcJ,GAJpB,OAIRpB,EAJQ,OAKdyB,QAAQC,IAAI1B,GACZiB,EAASjB,GANK,gDAQdyB,QAAQC,IAAR,MARc,yBAUdP,GAAa,GAVC,4EAAH,qDAcfI,GACD,GAAE,CAACH,KAGF,iCACE,SAAC,EAAD,CAAWpB,MAAOA,IAEjBkB,IACC,SAAC,KAAD,CACES,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAGb,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAG,OAAT,SAAgB,YAElB,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,SAAmB,iBAGvB,SAAC,EAAAC,SAAD,CAAUC,UAAU,yBAAK,uBAAzB,UACE,SAAC,KAAD,QAIP,C,sICrDYC,EAAS,mCAAG,8FACP,mCACVC,EAFiB,kEACP,oCADO,kBAKEC,MAAMD,GALR,cAKfE,EALe,gBAMAA,EAASC,OANT,cAMfC,EANe,yBAQdA,GARc,kCAUrBf,QAAQC,IAAR,MAVqB,0DAAH,qDAcTe,EAAuB,mCAAG,WAAMC,GAAN,iFACrB,mCACVN,EAF+B,4DACrB,mCADqB,kBAEkDM,GAFlD,kBAKZL,MAAMD,GALM,cAK7BE,EAL6B,gBAMPA,EAASC,OANF,cAM7BI,EAN6B,yBAQ5BA,GAR4B,kCAUnClB,QAAQC,IAAR,MAVmC,0DAAH,sDAcvBF,EAAa,mCAAG,kGAASoB,EAAT,EAASA,GACpB,mCACVR,EAFqB,6CAE4BQ,EAF5B,oBACX,oCADW,kBAKFP,MAAMD,GALJ,cAKnBE,EALmB,gBAMEA,EAASC,OANX,cAMnBM,EANmB,yBAQlBA,GARkB,kCAUzBpB,QAAQC,IAAR,MAVyB,0DAAH,qD","sources":["components/MovieCard.jsx","Pages/MovieDetails.jsx","service/MovieAPI.jsx"],"sourcesContent":["const MovieCard = ({ movie }) => {\n  const IMG_BASE_URL = 'https://image.tmdb.org/t/p/w400';\n\n  const {\n    poster_path: posterPath,\n    title,\n    release_date: releaseDate,\n    overview,\n    vote_average: voteAverage,\n  } = movie;\n\n  const percent = Math.round((voteAverage / 10) * 100).toString() + '%';\n\n  return (\n    <div>\n      <div>\n        {movie && posterPath && (\n          <img src={`${IMG_BASE_URL}/${posterPath}`} alt={movie.title} />\n        )}\n      </div>\n      <h3>{`${title} (${releaseDate && releaseDate.slice(0, 4)})`}</h3>\n      <p>Userscore: {percent}</p>\n      <p>{overview}</p>\n    </div>\n  );\n};\n\nexport default MovieCard;\n","import { Suspense, useEffect, useState } from 'react';\nimport { Link, Outlet, useParams } from 'react-router-dom';\nimport { getMoviesById } from '../service/MovieAPI';\nimport { RotatingLines } from 'react-loader-spinner';\nimport MovieCard from 'components/MovieCard';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const movieId = useParams();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const movie = await getMoviesById(movieId);\n        console.log(movie);\n        setMovie(movie);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <>\n      <MovieCard movie={movie} />\n\n      {isLoading && (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      )}\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Review</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","// API-Key\n// 4c6e55add2f00844e9f979bd7b0fac7c\n\nexport const getMovies = async () => {\n  const API_KEY = '4c6e55add2f00844e9f979bd7b0fac7c';\n  const BASE_URL = `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(BASE_URL);\n    const movies = await response.json();\n\n    return movies;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMoviesBySearchQuerry = async searchQuerry => {\n  const API_KEY = '4c6e55add2f00844e9f979bd7b0fac7c';\n  const BASE_URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchQuerry}`;\n\n  try {\n    const response = await fetch(BASE_URL);\n    const searchResults = await response.json();\n\n    return searchResults;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMoviesById = async ({ id }) => {\n  const API_KEY = '4c6e55add2f00844e9f979bd7b0fac7c';\n  const BASE_URL = `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`;\n\n  try {\n    const response = await fetch(BASE_URL);\n    const movieDetails = await response.json();\n\n    return movieDetails;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["movie","posterPath","poster_path","title","releaseDate","release_date","overview","voteAverage","vote_average","percent","Math","round","toString","src","alt","slice","useState","setMovie","isLoading","setIsLoading","movieId","useParams","useEffect","fetchData","getMoviesById","console","log","strokeColor","strokeWidth","animationDuration","width","visible","to","Suspense","fallback","getMovies","BASE_URL","fetch","response","json","movies","getMoviesBySearchQuerry","searchQuerry","searchResults","id","movieDetails"],"sourceRoot":""}